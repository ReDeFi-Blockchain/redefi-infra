name: nodes-only update

# Triger: only call from main workflow(re-usable workflows)
on:
  workflow_call:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  node-only-update:
    runs-on: [ self-hosted ]
    timeout-minutes: 2880           # 48 hours for execution jobs.
    name: parachain-node-only-update

    steps:
      - name: Skip if pull request is in Draft
        if: github.event.pull_request.draft == true
        run: exit 1

      - name: Clean Workspace
        if: always()
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      # # Prepare SHA  
      # - name: Prepare SHA
      #   uses: ./.github/actions/prepare

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Pull polkadot image from official repository
        run: |
          docker pull parity/polkadot:v1.7.0

      - name: Prepare redefi-relay-runtime container
        uses: ./.github/actions/buildContainer
        id: redefi-relay-runtime
        with:
          container: redefi-relay-runtime
          tag: latest
          context: .docker
          dockerfile: Dockerfile-relay-runtime
          args: |
            --build-arg REDEFI_RELAY_RUNTIME=${{ env.REDEFI_RELAY_RUNTIME_MAINNET_VERSION }}          

      - name: Copy runtime wasm file to host
        run: |
          docker run -v $PWD:/infra --rm --entrypoint cp ${{ steps.redefi-relay-runtime.outputs.name }} /redefi/redefi_runtime.compact.compressed.wasm /infra/
   
      - name: Prepare redefi-relay mainnet container
        uses: ./.github/actions/buildContainer
        id: redefi-relay-mainnet
        with:
          container: redefi-relay
          tag: mainnet
          context: .docker
          dockerfile: Dockerfile-relay
          args: |
            --build-arg REDEFI_RELAY=${{ env.REDEFI_RELAY_MAINNET_VERSION }}     

      - name: Prepare redefi-parachain mainnet container
        uses: ./.github/actions/buildContainer
        id: redefi-parachain-mainnet
        with:
          container: redefi-parachain
          tag: mainnet
          context: .docker
          dockerfile: Dockerfile-parachain
          args: |
            --build-arg REDEFI_PARACHAIN=${{ env.REDEFI_PARACHAIN_MAINNET_VERSION }}     

      - name: Prepare redefi-parachain latest container
        uses: ./.github/actions/buildContainer
        id: redefi-parachain-latest
        with:
          container: redefi-parachain
          tag: latest
          context: .docker
          dockerfile: Dockerfile-parachain
          args: |
            --build-arg REDEFI_PARACHAIN=${{ env.REDEFI_PARACHAIN_LATEST_VERSION }}

      - uses: actions/setup-node@v3.5.1
        with:
          node-version: 20

      - name: Install baedeker
        uses: UniqueNetwork/baedeker-action/setup@v1-no-debug-output
        with:
          useCache: false

      - name: Setup library
        run: mkdir -p .baedeker/vendor/ && git clone https://github.com/UniqueNetwork/baedeker-library .baedeker/vendor/baedeker-library

      - name: Start network
        uses: UniqueNetwork/baedeker-action@v1-no-debug-output
        id: bdk
        with:
          jpath: |
            .baedeker/vendor
          tla-str: |
            relay_spec=${{ env.RELAY_CHAIN_TYPE }}-local            
          inputs: |
            .baedeker/redefi.jsonnet
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/polkadot':{dockerImage:'parity/polkadot:v1.7.0'}})
            ephemeral:snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-relay':{dockerImage:'${{ steps.redefi-relay-mainnet.outputs.name }}'}})
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator':{dockerImage:'${{ steps.redefi-parachain-mainnet.outputs.name }}'}})

      - name: Run tests before Node upgrade
        working-directory: ./tests
        if: success()
        run: |
          yarn
          ./scripts/wait_for_first_block.sh
          echo "Ready to start tests"
          yarn test 
        env:
          RPC_URL_MAIN: ${{ env.REDEFI_RELAY_REDEFI_PARACHAIN_HTTP_URL }}
          RPC_URL_SIBLING: ${{ env.REDEFI_RELAY_HTTP_URL }}
          CROSSCHAIN: ${{ env.CROSSCHAIN }}

      - name: "Reconcile: only one old node"
        if: success() || failure()
        uses: UniqueNetwork/baedeker-action/reconcile@v1-no-debug-output
        with:
          baedeker: ${{ steps.bdk.outputs.baedeker }}
          # Chain should always be built with the mainnet spec, this we first set binary for all nodes expect one, then set mainnet binary for the last node, and then force chainspec to be still generated from mainnet
          inputs: |
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator':{dockerImage:'${{ steps.redefi-parachain-latest.outputs.name }}'}}, leave = 1, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator':{dockerImage:'${{ steps.redefi-parachain-mainnet.outputs.name }}'}}, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator':{dockerImage:'${{ steps.redefi-parachain-mainnet.outputs.name }}'}})

      - name: Ensure network is alive
        working-directory: ./tests
        if: success()
        run: |
          ./scripts/wait_for_first_block.sh
        env:
          RPC_URL_MAIN: ${{ env.REDEFI_RELAY_REDEFI_PARACHAIN_HTTP_URL }}
          RPC_URL_SIBLING: ${{ env.REDEFI_RELAY_HTTP_URL }}
          CROSSCHAIN: ${{ env.CROSSCHAIN }}

      - name: "Reconcile: all nodes are updated"
        if: success() || failure()
        uses: UniqueNetwork/baedeker-action/reconcile@v1-no-debug-output
        with:
          baedeker: ${{ steps.bdk.outputs.baedeker }}
          # Chain should always be built with the mainnet spec, this we first set binary for all nodes, and then force chainspec to be still generated from mainnet
          inputs: |
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator:{dockerImage:'${{ steps.redefi-parachain-latest.outputs.name }}'}}, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/redefi-collator':{dockerImage:'${{ steps.redefi-parachain-mainnet.outputs.name }}'}})

      - name: Run tests after Node upgrade
        working-directory: ./tests
        if: success() || failure()    # run this step even if previous step failed
        run: |
          yarn
          ./scripts/wait_for_first_block.sh
          echo "Ready to start tests"
          yarn test
        env:
          RPC_URL_MAIN: ${{ env.REDEFI_RELAY_REDEFI_PARACHAIN_HTTP_URL }}
          RPC_URL_SIBLING: ${{ env.REDEFI_RELAY_HTTP_URL }}
          CROSSCHAIN: ${{ env.CROSSCHAIN }}

      - name: Remove builder cache
        if: always()                   # run this step always
        run: |
          docker system prune -f
